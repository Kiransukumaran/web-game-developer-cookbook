var Game, game,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Game = (function(superClass) {
  extend(Game, superClass);

  function Game() {
    Game.__super__.constructor.apply(this, arguments);
    atom.input.bind(atom.key.LEFT_ARROW, 'left');
  }

  Game.prototype.update = function(dt) {
    if (atom.input.pressed('left')) {
      return console.log("player started moving left");
    } else if (atom.input.down('left')) {
      return console.log("player still moving left");
    }
  };

  Game.prototype.draw = function() {
    atom.context.fillStyle = 'black';
    return atom.context.fillRect(0, 0, atom.width, atom.height);
  };

  return Game;

})(atom.Game);

game = new Game;

window.onblur = function() {
  return game.stop();
};

window.onfocus = function() {
  return game.run();
};

game.run();

// ---
// generated by coffee-script 1.9.2
// http://js2.coffee/